{"remainingRequest":"/home/bhagyashreebhoyer/small-curd-application-vuetify/VueJS-learning-curve-with-vuetify/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/bhagyashreebhoyer/small-curd-application-vuetify/VueJS-learning-curve-with-vuetify/src/components/Update.vue?vue&type=style&index=0&id=a18ae1a2&scoped=true&lang=css&","dependencies":[{"path":"/home/bhagyashreebhoyer/small-curd-application-vuetify/VueJS-learning-curve-with-vuetify/src/components/Update.vue","mtime":1582796638619},{"path":"/home/bhagyashreebhoyer/small-curd-application-vuetify/VueJS-learning-curve-with-vuetify/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bhagyashreebhoyer/small-curd-application-vuetify/VueJS-learning-curve-with-vuetify/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/bhagyashreebhoyer/small-curd-application-vuetify/VueJS-learning-curve-with-vuetify/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/bhagyashreebhoyer/small-curd-application-vuetify/VueJS-learning-curve-with-vuetify/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/home/bhagyashreebhoyer/small-curd-application-vuetify/VueJS-learning-curve-with-vuetify/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bhagyashreebhoyer/small-curd-application-vuetify/VueJS-learning-curve-with-vuetify/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojZW50cnktbGlzdCB7CiAgYmFja2dyb3VuZDogI2U4ZTBiNDsKICBib3gtc2hhZG93OiAxcHggMnB4IDNweCByZ2JhKDAsMCwwLDAuMik7CiAgcGFkZGluZzogMTVweCAyNXB4Owp9Ci5saXN0IHsKICBwYWRkaW5nOiAwOwp9Ci5saXN0LWl0ZW0gewogIG1hcmdpbi1yaWdodDogMTBweDsKICBtYXJnaW4tdG9wOiAxMHB4OwogIHBhZGRpbmc6IDEwcHg7CiAgYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwwLjcpOwp9Ci5zdWItaGVhZGVyIHsKICBmb250LXNpemU6IDI1cHg7CiAgcGFkZGluZzogMDsKfQouaXRlbXMtd3JhcHBlciB7CiAgZGlzcGxheTogZmxleDsKICBvdmVyZmxvdzogaGlkZGVuOwp9Cgo="},{"version":3,"sources":["Update.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Update.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-card>\n    <v-list flat  id=\"entry-list\">\n      <v-subheader class=\"sub-header\">\n        Update\n      </v-subheader>\n      <v-list-item-group\n        v-model=\"item\"\n        color=\"primary\"\n        class=\"list\"\n      >\n        <v-list-item\n          class=\"list-item\"\n          v-for=\"(entry, index) in entrys\"\n          :key=\"entry\"\n        >\n          <div class=\"items-wrapper\" v-if=\"!(updateIndex == index)\">\n            <v-list-item-icon>\n              <v-btn\n                title=\"Update\"\n                min-width=\"20px\"\n                width=\"20px\"\n                height=\"25px\"\n                color=\"success\"\n                @click=\"updateEntry(entry.name, entry.email, index)\"\n              >\n                <v-icon>\n                  mdi-account-circle\n                </v-icon>\n              </v-btn>  \n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title>\n                Name: {{ entry.name }},  Email: {{ entry.email }}\n              </v-list-item-title>\n            </v-list-item-content>\n          </div>\n          <div v-if=\"update && (updateIndex == index)\">\n            <v-form ref=\"form\"\n              v-model=\"valid\"\n              v-if=\"!submitted\"\n              @submit.prevent=\"updateEnttryValues()\"\n            >\n              <v-text-field\n                v-model=\"name\"\n                :error-messages=\"nameErrors\"\n                :counter=\"20\"\n                label=\"Name\"\n                required\n                @input=\"$v.name.$touch()\"\n                @blur=\"$v.name.$touch()\"\n              >\n              </v-text-field>\n              <v-text-field\n                v-model=\"email\"\n                :error-messages=\"emailErrors\"\n                label=\"E-mail\"\n                required\n                @input=\"$v.email.$touch()\"\n                @blur=\"$v.email.$touch()\"\n              >\n              </v-text-field>\n              <v-btn\n                class=\"mr-4\"\n                type=\"submit\"\n                color=\"success\"\n              >\n                submit\n              </v-btn>\n              <v-btn\n                @click=\"clear\"\n                color=\"warning\"\n              >\n                clear\n              </v-btn>\n            </v-form>\n            <v-alert\n              v-model=\"submitted\"\n              dense\n              text\n              icon=\"mdi-check\"\n              type=\"success\"\n              elevation=\"2\"\n            >\n              Added entry successfully!\n              <v-btn\n                min-width=\"20px\"\n                color=\"success\"\n                width=\"20px\"\n                height=\"25px\"\n                v-on:click=\"toggleSubmited\"\n              >\n                <v-icon >\n                  mdi-close-circle\n                </v-icon>\n              </v-btn>\n            </v-alert>\n          </div>\n        </v-list-item>\n      </v-list-item-group>\n    </v-list>\n  </v-card>\n</template>\n\n<script>\n\n  /* eslint-disable no-useless-escape */\n  import cloneDeep from 'lodash/cloneDeep';\n  import { validationMixin } from 'vuelidate'\n  import { required, maxLength, email } from 'vuelidate/lib/validators'\n    \n  export default {\n    mixins: [validationMixin],\n    validations: {\n      name: { required, maxLength: maxLength(20) },\n      email: { required, email },\n    },\n    name: 'List',\n    data: () => ({\n      name: '',\n      email: '',\n      valid: false,\n      submitted: false,\n      update: false,\n      updateIndex: null,\n      preveousEntrys: [],\n    }),\n    computed: {\n      entrys(){\n        return this.$store.state.entrys\n      },\n      nameErrors () {\n        const errors = [];\n        const nameRegExp = /^[a-zA-Z\\s\\.]+$/;\n        if (!this.$v.name.$dirty) return errors\n        !this.$v.name.maxLength && errors.push('Name must be at most 20 characters long')\n        !this.$v.name.required && errors.push('Name is required.')\n        !nameRegExp.test(this.name) && errors.push('Name can have only characters')\n        return errors\n      },\n      emailErrors () {\n        const errors = [];\n      \n        if (!this.$v.email.$dirty) return errors \n        this.$store.state.entrys.forEach((entry, index) => {\n        if (entry.email == this.email && index !== this.updateIndex) errors.push('This email already exists');\n         });\n        !this.$v.email.email && errors.push('Must be valid e-mail')\n        !this.$v.email.required && errors.push('E-mail is required')\n        return errors\n      },\n    },\n    methods: {\n      updateEntry: function(name, email, index) {\n        this.name= name;\n        this.email= email;\n        this.updateIndex= index;\n        this.update= true;\n      },\n        \n      updateEnttryValues: function () {\n        this.$v.$touch()\n        if(this.valid && this.name && this.email) {\n          this.preveousEntrys = cloneDeep(this.$store.state.entrys);\n          this.preveousEntrys[this.updateIndex].name= this.name;\n          this.preveousEntrys[this.updateIndex].email= this.email;\n          this.$store.dispatch('updateEnttrys', this.preveousEntrys);  \n          this.submitted= true;\n          this.clear();\n        }\n      },\n      toggleSubmited: function () {\n        this.submitted= false;\n        this.update= false;\n        this.updateIndex= null;\n        this.preveousEntrys= [];\n      },\n      clear () {\n        this.$v.$reset()\n        this.name = ''\n        this.email = ''\n      },\n    },\n  }\n\n</script>\n\n<style scoped>\n  #entry-list {\n    background: #e8e0b4;\n    box-shadow: 1px 2px 3px rgba(0,0,0,0.2);\n    padding: 15px 25px;\n  }\n  .list {\n    padding: 0;\n  }\n  .list-item {\n    margin-right: 10px;\n    margin-top: 10px;\n    padding: 10px;\n    background: rgba(255,255,255,0.7);\n  }\n  .sub-header {\n    font-size: 25px;\n    padding: 0;\n  }\n  .items-wrapper {\n    display: flex;\n    overflow: hidden;\n  }\n\n</style>"]}]}